name: QMake Build Matrix

on: [push]

env:
  QT_VERSION: 5.14.2
  QT_CREATOR_VERSION: 4.12.0
  PLUGIN_PRO: doxygen.pro
  PLUGIN_NAME: Doxygen

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            msvc: win64_msvc2017_64,
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Windows Latest x86", artifact: "Windows-x86.zip",
            msvc: win32_msvc2017,
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat"
          }
          - {
            name: "Linux Latest x64", artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }
          - {
            name: "macOS Latest x64", artifact: "macOS-x64.zip",
            os: macos-latest
          }

    steps:
      - uses: actions/checkout@v1

      - name: Installing system libs
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Linux")
            execute_process(
              COMMAND sudo apt install libgl1-mesa-dev
            )
          endif()
      - name: Download Qt
        id: qt
        uses: jurplel/install-qt-action@v2
        with:
          version: "${{ env.QT_VERSION }}"
          modules: qtdeclarative qttools qtsvg
          arch: "${{ matrix.config.msvc }}"

      - name: Build
        shell: cmake -P {0}
        run: |
          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            set(ENV{LD_LIBRARY_PATH} "qtcreator/lib/Qt/lib:$ENV{LD_LIBRARY_PATH}")
          endif()
          include(ProcessorCount)
          ProcessorCount(N)
          set(make_program make -j ${N})
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(make_program "qtcreator/bin/jom")
          endif()
          execute_process(
            COMMAND ${make_program}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/$ENV{PLUGIN_NAME}-$ENV{QT_CREATOR_VERSION}-${{ matrix.config.artifact }}" artifact)
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${artifact} --format=zip "${{ steps.qt_creator.outputs.qtc_binary_name }}"
            WORKING_DIRECTORY "${{ steps.qt_creator.outputs.qtc_output_directory }}"
          )
      - uses: actions/upload-artifact@v1
        id: upload_artifact
        with:
          path: ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          name: ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: ubuntu-latest
          }
          - {
            name: "Windows Latest x86", artifact: "Windows-x86.zip",
            os: ubuntu-latest
          }
          - {
            name: "Linux Latest x64", artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }
          - {
            name: "macOS Latest x64", artifact: "macOS-x64.zip",
            os: macos-latest
          }
    needs: release

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./
      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url
      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          asset_name: ${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
          asset_content_type: application/zip